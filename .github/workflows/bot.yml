name: Run Discord Bot 24/7 with MongoDB

on:
  workflow_dispatch:  # Manual trigger
  push:               # Run on code changes
    branches: [ main, master ]
  schedule:           # Restart every 5 hours (before 6-hour limit)
    - cron: '0 */5 * * *'

env:
  PYTHON_VERSION: '3.9'
  MONGO_VERSION: '5.0'

jobs:
  setup-and-test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install discord.py motor python-dotenv pymongo aiohttp
        pip install pytest pytest-asyncio
        
    - name: Run configuration validation
      env:
        TESTING: "true"
      run: |
        python -c "
        import config
        errors = config.validate_config()
        if errors:
            print('Configuration errors found:')
            for error in errors:
                print(f'  - {error}')
            exit(1)
        else:
            print('Configuration validation passed!')
        "
        
    - name: Run basic tests
      env:
        TESTING: "true"
      run: |
        python -c "
        # Test basic imports
        try:
            import discord
            from motor.motor_asyncio import AsyncIOMotorClient
            import config
            print('✓ All imports successful')
            
            # Test config helpers
            duration = config.get_premium_duration('7days')
            is_admin = config.is_admin(12345)
            color = config.get_embed_color('success')
            print('✓ Config helper functions working')
            
        except Exception as e:
            print(f'❌ Import test failed: {e}')
            exit(1)
        "

  run-bot:
    runs-on: ubuntu-latest
    needs: setup-and-test
    timeout-minutes: 350  # 5 hours 50 minutes (just under 6 hours)
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install discord.py motor python-dotenv pymongo aiohttp
        
    - name: Wait for MongoDB to be ready
      run: |
        echo "Waiting for MongoDB to be ready..."
        timeout 60s bash -c 'until nc -z localhost 27017; do sleep 1; done'
        echo "MongoDB is ready!"
        
    - name: Test MongoDB connection
      env:
        TESTING: "true"
      run: |
        # Create a separate Python script for testing MongoDB
        cat > test_mongo.py << 'EOF'
        import asyncio
        import os
        import sys
        sys.path.append('.')
        
        from utils.database import MongoDB
        
        async def test_mongo_connection():
            try:
                db = MongoDB()
                # Test connection
                await db.client.admin.command('ping')
                print('✅ MongoDB connection successful')
                return True
            except Exception as e:
                print(f'❌ MongoDB connection failed: {e}')
                return False
        
        async def test_mongo_operations():
            try:
                db = MongoDB()
                # Test basic operations
                test_user_id = 'github_actions_test'
                user_data = await db.get_user(test_user_id)
                print('✅ User retrieval test passed: ' + str(user_data['_id']))
                
                await db.update_user(test_user_id, {'test_field': 'test_value'})
                print('✅ User update test passed')
                
                await db.increment_questions_answered(test_user_id)
                print('✅ Question increment test passed')
                
                # Clean up test data
                await db.users.delete_one({'_id': test_user_id})
                print('✅ Test cleanup completed')
                
                return True
            except Exception as e:
                print(f'❌ MongoDB operations test failed: {e}')
                return False
        
        async def main():
            # Test connection first
            connection_ok = await test_mongo_connection()
            if not connection_ok:
                return False
            
            # Test operations if connection is successful
            operations_ok = await test_mongo_operations()
            return operations_ok
        
        if __name__ == "__main__":
            success = asyncio.run(main())
            exit(0 if success else 1)
        EOF
        
        python test_mongo.py
        
    - name: Create data directories
      run: |
        mkdir -p data
        mkdir -p logs
        mkdir -p backups
        mkdir -p images
        
    - name: Run Discord Bot with MongoDB
      env:
        BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
        MONGO_URI: "mongodb://admin:password@localhost:27017"
        DATABASE_NAME: "discord_bot_github"
      run: |
        echo "=== Starting Discord Bot with MongoDB ==="
        echo "Python version: $(python --version)"
        echo "MongoDB URI: $MONGO_URI"
        echo "Database: $DATABASE_NAME"
        
        # Add automatic restart wrapper with improved error handling
        MAX_RESTARTS=10
        RESTART_COUNT=0
        
        while [ $RESTART_COUNT -le $MAX_RESTARTS ]; do
          echo "=== Starting bot (attempt $((RESTART_COUNT + 1))/$((MAX_RESTARTS + 1))) at $(date) ==="
          
          # Run the bot with improved error handling
          python main.py
          EXIT_CODE=$?
          
          if [ $EXIT_CODE -eq 0 ]; then
            echo "=== Bot stopped normally with exit code $EXIT_CODE at $(date) ==="
            break
          else
            echo "=== Bot stopped with exit code $EXIT_CODE at $(date) ==="
            
            RESTART_COUNT=$((RESTART_COUNT + 1))
            
            if [ $RESTART_COUNT -gt $MAX_RESTARTS ]; then
              echo "Maximum restart attempts ($MAX_RESTARTS) reached. Not restarting."
              exit 1
            fi
            
            echo "Bot crashed or was stopped, restarting in 10 seconds..."
            sleep 10
          fi
        done

  deploy-production:
    runs-on: ubuntu-latest
    needs: run-bot
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install discord.py motor python-dotenv pymongo aiohttp
        
    - name: Create production deployment package
      run: |
        # Create a deployment package
        mkdir -p deployment
        cp -r *.py utils config.py requirements.txt deployment/
        mkdir -p deployment/data
        mkdir -p deployment/logs
        mkdir -p deployment/backups
        
        # Create deployment info file
        echo "Deployment Time: $(date)" > deployment/deployment_info.txt
        echo "Commit: $GITHUB_SHA" >> deployment/deployment_info.txt
        echo "Branch: $GITHUB_REF" >> deployment/deployment_info.txt
        
        # Create deployment package
        tar -czf deployment_package.tar.gz deployment/
        echo "Deployment package created: deployment_package.tar.gz"
        
    - name: Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: discord-bot-deployment
        path: deployment_package.tar.gz
        
    - name: Send deployment notification
      if: always()
      run: |
        echo "Deployment process completed for $GITHUB_REF"
        echo "Commit: $GITHUB_SHA"

  monitoring:
    runs-on: ubuntu-latest
    needs: run-bot
    timeout-minutes: 10
    
    steps:
    - name: Check monitoring endpoints
      run: |
        echo "Monitoring step would check external services here"
        echo "Bot execution completed successfully"
